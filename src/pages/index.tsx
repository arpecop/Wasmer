// import HeaderLogin from "@/components/HeaderLogin";
// import JumbotronClient from "@/components/jumbotron-client";
// import SimilarArticles from "@/components/similar-articles";
import SimilarArticles from '@/components/SimilarArticles';
import { client } from "../../lib/client";

type ItemT = {
  text: string;
  genid: string;
  type: string;
  random: number;
};

type Thread = {
  q: ItemT;
  a: ItemT;
};

const Jumbotron = ({ thread }: { thread: Thread[] }) => {
  return (
    <div className="bg-gray-100">
      {/* <HeaderLogin /> */}
      <div className="container mx-auto px-4 flex flex-col justify-center items-center">
        <img
          src="/logo.png"
          alt="AI-Powered Knowledge"
          className="mx-auto w-1/2 sm:w-1/3 "
        />
        <h1 className="text-4xl sm:text-5xl md:text-6xl font-extrabold text-center mb-6">
          Discover AI-Powered Knowledge
        </h1>
        <p className="text-xl sm:text-2xl text-center mb-8 max-w-3xl mx-auto">
          Explore a <span className="font-extrabold">13 million</span> dataset
          of questions and answers generated by{" "}
          <span className="font-extrabold">cutting-edge AI </span>
          technology. Learn, discover, and satisfy your curiosity.
        </p>
      </div>
      {/* <JumbotronClient showMore /> */}
      <SimilarArticles thread={thread} text="Start Exploring" />
    </div>
  );
}
export async function getServerSideProps() {
  const currentDate = new Date();
  const dayOfYear: number = Math.floor(
    (currentDate.getTime() -
      new Date(currentDate.getFullYear(), 0, 0).getTime()) /
    86400000 +
    1,
  );
  const total = Math.round(3695246 / dayOfYear);

  const respx = (await client(
    `query MyQuery($_eq1: Int = 9000) {
  q_q(limit: 30, offset: $_eq1) {
  genid
  random
  }
}`,
    { _eq1: total },
  )) as [{ genid: string; random: number }[]];
  //dsad
  const filtered = respx[0].map((x) => x.genid).slice(0, 30) as string[];

  const respTwo = (await client(
    `query MyQuery($_in: [String!] = "") {
     questions(where: {genid: {_in: $_in}}) {
       text
       genid
       type
       random
     }
   }
 `,
    { _in: filtered },
  )) as [ItemT[]];
  const resfilter = respTwo[0]
    .filter((x) => x.type === "a")
    .map((x) => x.genid);

  const thread = resfilter.map((x) => ({
    q: respTwo[0].find((yz) => yz.genid === x && yz.type === "q"),
    a: respTwo[0].find((yz) => yz.genid === x && yz.type === "a"),
  })) as Thread[];
  // Pass the fetched data as props to the component
  return {
    props: {
      thread,
    },
  };
}

export default Jumbotron

